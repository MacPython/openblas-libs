name: Linux,macOS build

on:
  push:
    branches: [ master, openblas-wheel ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        platform: [x64]
        PLAT: [x86_64]
        INTERFACE64: ['1']
        MB_ML_VER: ['2014']

    env:
      REPO_DIR: OpenBLAS
      OPENBLAS_COMMIT: "bfd9c1b58cd3"
      MACOSX_DEPLOYMENT_TARGET: 10.9
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      MB_ML_LIBC: ${{ matrix.MB_ML_LIBC }}
      MB_ML_VER: ${{ matrix.MB_ML_VER }}
      INTERFACE64: ${{ matrix.INTERFACE64 }}
      BUILD_DIR: ${{ github.workspace }}
      SCIPY_WHEELS_NIGHTLY_ACCESS: ${{ secrets.SCIPY_WHEELS_NIGHTLY_ACCESS }}
      MULTIBUILD_WHEELS_STAGING_ACCESS: ${{ secrets.MULTIBUILD_WHEELS_STAGING_BUILD }}
      PLAT: ${{ matrix.PLAT }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set extra env
      run: |
        if [ "macos-latest" == "${{ matrix.os }}" ]; then echo "TRAVIS_OS_NAME=osx" >> $GITHUB_ENV; else echo "TRAVIS_OS_NAME=${{ matrix.os }}" >> $GITHUB_ENV; fi
        if [ "macos-latest" == "${{ matrix.os }}" ]; then echo "LDFLAGS=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib" >> $GITHUB_ENV; fi
        echo "DOCKER_TEST_IMAGE=$(echo multibuild/xenial_${{ matrix.PLAT}})" >> $GITHUB_ENV;
    - name: Print some Environment variable
      run: |
        echo "TRAVIS_OS_NAME: ${TRAVIS_OS_NAME}"
        echo "PLAT: ${PLAT}"
        echo "DOCKER_TEST_IMAGE: ${DOCKER_TEST_IMAGE}"
    - name: Install VirtualEnv
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv
    - name: Build OpenBLAS
      run: |
        if [[ "$PLAT" == "arm64" ]]; then
          sudo xcode-select -switch /Applications/Xcode_12.5.1.app
          export SDKROOT=/Applications/Xcode_12.5.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk
        fi
        source travis-ci/build_steps.sh
        echo "------ BEFORE BUILD ---------"
        before_build
        echo "------ CLEAN CODE --------"
        clean_code $REPO_DIR $OPENBLAS_COMMIT
        echo "------ BUILD LIB --------"
        build_lib "$PLAT" "$INTERFACE64"

    - name: Build wheel
      run: |
        mkdir -p local/openblas
        tar -C local/openblas --strip-components=2 -xf libs/openblas*.tar.gz
        cp local/openblas/lib/libopenblas64_.so local/openblas/libopenblas_python.so
        # do not package the static libs and symlinks, they are ~55MB
        rm -rf local/openblas/lib/*
        mv local/openblas/libopenblas_python.so local/openblas/lib/

        cat <<EOF > run_in_docker.sh
        cd /openblas
        patchelf --set-soname libopenblas_python.so local/openblas/lib/libopenblas_python.so
        python3.7 -m pip wheel -w /tmp/wheelhouse -vv .
        auditwheel repair -w dist/ /tmp/wheelhouse/openblas-*.whl
        python3.10 -m pip install dist/openblas-*.whl
        python3.10 -m openblas
        EOF

        docker run --rm -v $(pwd):/openblas quay.io/pypa/manylinux2014_x86_64 /bin/bash -xe /openblas/run_in_docker.sh

        # test numpy build
        git clone https://github.com/mayeut/numpy.git numpy
        cd numpy
        git checkout openblas-wheel
        git submodule update --init --recursive
        cp -rf ../dist ./openblas-wheel
        python3 -m pip install --user cibuildwheel
        cibuildwheel --only cp310-manylinux_x86_64

    - uses: actions/upload-artifact@v3
      with:
        path: libs/openblas*.tar.gz

    - uses: actions/upload-artifact@v3
      with:
        path: dist/openblas*.whl

    - name: Upload
      run: |
        set -ex
        TOKEN=${{ secrets.MULTIBUILD_WHEELS_STAGING_ACCESS }}
        if [ "$TOKEN" == "" ]; then
            # The token is available when under the MacPython org, not on forks
            echo "secrets.MULTIBUILD_WHEELS_STAGING_ACCESS is not defined: skipping";
        else
            pip install git+https://github.com/Anaconda-Server/anaconda-client@1.8.0
            # The first -t option refers to the token, the second is the "type"
            # option to the "upload" command
            anaconda -t  ${TOKEN} upload \
            --no-progress --skip -u multibuild-wheels-staging \
            -t file -p "openblas-libs" \
            -v "$(cd OpenBLAS && git describe --tags --abbrev=8)" \
            -d "OpenBLAS for multibuild wheels" \
            -s "OpenBLAS for multibuild wheels" \
            libs/openblas*.tar.gz;
        fi
