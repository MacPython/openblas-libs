# vim ft=yaml

os: Visual Studio 2019

environment:
  global:
    OPENBLAS_COMMIT: 349b722d8d09303
    OPENBLAS_ROOT: c:\opt
    MSYS2_ROOT: c:\msys64
    # The value of the existing token can be retrieved at the bottom of the page at:
    #   https://anaconda.org/multibuild-wheels-staging/settings/access:
    # To generate a new token, we need the permissions:
    # - "Allow write access to the API site"
    # - "Allow uploads to PyPI repositories"
    # OPENBLAS_LIBS_STAGING_UPLOAD_TOKEN: this variable has been encrypted
    # in the appveyor UI at: https://ci.appveyor.com/project/tylerjereddy/openblas-libs/settings/environment
    PYTHON: "C:\\Python37"

  # Need for mingw-builds discussed at
  # https://github.com/xianyi/OpenBLAS/issues/1503
  # Downloads via https://sourceforge.net/projects/mingw-w64/files
  # Note spaces instead of %20 in URL, to avoid Windows env var expansion
  matrix:
    - BUILD_BITS: 64
      INTERFACE64: 1
      MINGW_URL: "https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z/download"

    - BUILD_BITS: 32
      MINGW_URL: "https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win32/Personal Builds/mingw-builds/8.1.0/threads-posix/dwarf/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z/download"

    - BUILD_BITS: 64
      MINGW_URL: "https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z/download"

build_script:
  # Build OpenBLAS, build and install the test file
  - if "%BUILD_BITS%"=="32" (set PLAT=i686) else (set PLAT=x86_64)
  - set VC9_ROOT=C:\Users\appveyor\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC
  - PATH=%MSYS2_ROOT%\usr\bin;%PATH%
  # Get mingw-builds compiler chain, put on path
  # Quote for env var to protect spaces.
  - curl -L "%MINGW_URL%" -o downloads\mingw_distro.7z
  - 7z x downloads\mingw_distro.7z
  - PATH=%__CD__%\mingw%BUILD_BITS%\bin;%PATH%
  # Update keys
  - pacman-key --init; pacman-key --populate
  # Remove competing gcc / gfortran
  - pacman -Rs --noconfirm gcc gcc-fortran mingw-w64-%PLAT%-toolchain
  # zip needed for packing archive
  - pacman -Sy --noconfirm zip
  - git submodule update --init --recursive
  - set MSYSTEM=MINGW%BUILD_BITS%
  - set START_DIR=%__CD__%
  - set SCRIPT_DIR=%START_DIR%appveyor\
  # Need --login to process MSYSTEM variable
  - bash --login %SCRIPT_DIR%build_openblas.sh

test_script:
  - bash --login %SCRIPT_DIR%build_gfortran.sh
  - copy test.exe builds
  - copy test_dyn.exe builds
  - bash --login -c "$(cygpath $START_DIR)test.exe"
  - copy %OPENBLAS_ROOT%\%BUILD_BITS%\bin\*.dll .
  - bash --login -c "$(cygpath $START_DIR)test_dyn.exe"

on_finish:
  - ps: Get-ChildItem builds\*.* | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

on_success:
  # Upload libraries to the shared staging area on anaconda.org
  # Note that the anaconda-client package on PyPI is too old. Install from github
  # tag instead:
  - set PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - pip install -q git+https://github.com/Anaconda-Platform/anaconda-client@1.7.2
  - bash --login %SCRIPT_DIR%upload_to_anaconda_staging.sh
